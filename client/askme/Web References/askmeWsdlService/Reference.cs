//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4952.
// 
#pragma warning disable 1591

namespace asktomyself.askmeWsdlService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="askmewsdlBinding", Namespace="urn:askmewsdl")]
    public partial class askmewsdl : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback get_missing_countOperationCompleted;
        
        private System.Threading.SendOrPostCallback get_update_availableOperationCompleted;
        
        private System.Threading.SendOrPostCallback get_software_versionOperationCompleted;
        
        private System.Threading.SendOrPostCallback set_settingOperationCompleted;
        
        private System.Threading.SendOrPostCallback get_settingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback get_categoriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback get_questionOperationCompleted;
        
        private System.Threading.SendOrPostCallback set_questionOperationCompleted;
        
        private System.Threading.SendOrPostCallback add_wordOperationCompleted;
        
        private System.Threading.SendOrPostCallback try_loginOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public askmewsdl() {
            this.Url = global::asktomyself.Properties.Settings.Default.askme_askmeWsdlService_askmewsdl;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event get_missing_countCompletedEventHandler get_missing_countCompleted;
        
        /// <remarks/>
        public event get_update_availableCompletedEventHandler get_update_availableCompleted;
        
        /// <remarks/>
        public event get_software_versionCompletedEventHandler get_software_versionCompleted;
        
        /// <remarks/>
        public event set_settingCompletedEventHandler set_settingCompleted;
        
        /// <remarks/>
        public event get_settingsCompletedEventHandler get_settingsCompleted;
        
        /// <remarks/>
        public event get_categoriesCompletedEventHandler get_categoriesCompleted;
        
        /// <remarks/>
        public event get_questionCompletedEventHandler get_questionCompleted;
        
        /// <remarks/>
        public event set_questionCompletedEventHandler set_questionCompleted;
        
        /// <remarks/>
        public event add_wordCompletedEventHandler add_wordCompleted;
        
        /// <remarks/>
        public event try_loginCompletedEventHandler try_loginCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:askmewsdl#get_missing_count", RequestNamespace="urn:askmewsdl", ResponseNamespace="urn:askmewsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int get_missing_count(string user, string pass, int what) {
            object[] results = this.Invoke("get_missing_count", new object[] {
                        user,
                        pass,
                        what});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void get_missing_countAsync(string user, string pass, int what) {
            this.get_missing_countAsync(user, pass, what, null);
        }
        
        /// <remarks/>
        public void get_missing_countAsync(string user, string pass, int what, object userState) {
            if ((this.get_missing_countOperationCompleted == null)) {
                this.get_missing_countOperationCompleted = new System.Threading.SendOrPostCallback(this.Onget_missing_countOperationCompleted);
            }
            this.InvokeAsync("get_missing_count", new object[] {
                        user,
                        pass,
                        what}, this.get_missing_countOperationCompleted, userState);
        }
        
        private void Onget_missing_countOperationCompleted(object arg) {
            if ((this.get_missing_countCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.get_missing_countCompleted(this, new get_missing_countCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:askmewsdl#get_update_available", RequestNamespace="urn:askmewsdl", ResponseNamespace="urn:askmewsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string get_update_available(string user, string pass, string version) {
            object[] results = this.Invoke("get_update_available", new object[] {
                        user,
                        pass,
                        version});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void get_update_availableAsync(string user, string pass, string version) {
            this.get_update_availableAsync(user, pass, version, null);
        }
        
        /// <remarks/>
        public void get_update_availableAsync(string user, string pass, string version, object userState) {
            if ((this.get_update_availableOperationCompleted == null)) {
                this.get_update_availableOperationCompleted = new System.Threading.SendOrPostCallback(this.Onget_update_availableOperationCompleted);
            }
            this.InvokeAsync("get_update_available", new object[] {
                        user,
                        pass,
                        version}, this.get_update_availableOperationCompleted, userState);
        }
        
        private void Onget_update_availableOperationCompleted(object arg) {
            if ((this.get_update_availableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.get_update_availableCompleted(this, new get_update_availableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:askmewsdl#get_software_version", RequestNamespace="urn:askmewsdl", ResponseNamespace="urn:askmewsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string get_software_version(string user, string pass, int what) {
            object[] results = this.Invoke("get_software_version", new object[] {
                        user,
                        pass,
                        what});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void get_software_versionAsync(string user, string pass, int what) {
            this.get_software_versionAsync(user, pass, what, null);
        }
        
        /// <remarks/>
        public void get_software_versionAsync(string user, string pass, int what, object userState) {
            if ((this.get_software_versionOperationCompleted == null)) {
                this.get_software_versionOperationCompleted = new System.Threading.SendOrPostCallback(this.Onget_software_versionOperationCompleted);
            }
            this.InvokeAsync("get_software_version", new object[] {
                        user,
                        pass,
                        what}, this.get_software_versionOperationCompleted, userState);
        }
        
        private void Onget_software_versionOperationCompleted(object arg) {
            if ((this.get_software_versionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.get_software_versionCompleted(this, new get_software_versionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:askmewsdl#set_setting", RequestNamespace="urn:askmewsdl", ResponseNamespace="urn:askmewsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public bool set_setting(string user, string pass, int id_setting, string val_setting) {
            object[] results = this.Invoke("set_setting", new object[] {
                        user,
                        pass,
                        id_setting,
                        val_setting});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void set_settingAsync(string user, string pass, int id_setting, string val_setting) {
            this.set_settingAsync(user, pass, id_setting, val_setting, null);
        }
        
        /// <remarks/>
        public void set_settingAsync(string user, string pass, int id_setting, string val_setting, object userState) {
            if ((this.set_settingOperationCompleted == null)) {
                this.set_settingOperationCompleted = new System.Threading.SendOrPostCallback(this.Onset_settingOperationCompleted);
            }
            this.InvokeAsync("set_setting", new object[] {
                        user,
                        pass,
                        id_setting,
                        val_setting}, this.set_settingOperationCompleted, userState);
        }
        
        private void Onset_settingOperationCompleted(object arg) {
            if ((this.set_settingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.set_settingCompleted(this, new set_settingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:askmewsdl#get_settings", RequestNamespace="urn:askmewsdl", ResponseNamespace="urn:askmewsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string get_settings(string user, string pass) {
            object[] results = this.Invoke("get_settings", new object[] {
                        user,
                        pass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void get_settingsAsync(string user, string pass) {
            this.get_settingsAsync(user, pass, null);
        }
        
        /// <remarks/>
        public void get_settingsAsync(string user, string pass, object userState) {
            if ((this.get_settingsOperationCompleted == null)) {
                this.get_settingsOperationCompleted = new System.Threading.SendOrPostCallback(this.Onget_settingsOperationCompleted);
            }
            this.InvokeAsync("get_settings", new object[] {
                        user,
                        pass}, this.get_settingsOperationCompleted, userState);
        }
        
        private void Onget_settingsOperationCompleted(object arg) {
            if ((this.get_settingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.get_settingsCompleted(this, new get_settingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:askmewsdl#get_categories", RequestNamespace="urn:askmewsdl", ResponseNamespace="urn:askmewsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string get_categories(string user, string pass) {
            object[] results = this.Invoke("get_categories", new object[] {
                        user,
                        pass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void get_categoriesAsync(string user, string pass) {
            this.get_categoriesAsync(user, pass, null);
        }
        
        /// <remarks/>
        public void get_categoriesAsync(string user, string pass, object userState) {
            if ((this.get_categoriesOperationCompleted == null)) {
                this.get_categoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.Onget_categoriesOperationCompleted);
            }
            this.InvokeAsync("get_categories", new object[] {
                        user,
                        pass}, this.get_categoriesOperationCompleted, userState);
        }
        
        private void Onget_categoriesOperationCompleted(object arg) {
            if ((this.get_categoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.get_categoriesCompleted(this, new get_categoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:askmewsdl#get_question", RequestNamespace="urn:askmewsdl", ResponseNamespace="urn:askmewsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string get_question(string user, string pass, int category) {
            object[] results = this.Invoke("get_question", new object[] {
                        user,
                        pass,
                        category});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void get_questionAsync(string user, string pass, int category) {
            this.get_questionAsync(user, pass, category, null);
        }
        
        /// <remarks/>
        public void get_questionAsync(string user, string pass, int category, object userState) {
            if ((this.get_questionOperationCompleted == null)) {
                this.get_questionOperationCompleted = new System.Threading.SendOrPostCallback(this.Onget_questionOperationCompleted);
            }
            this.InvokeAsync("get_question", new object[] {
                        user,
                        pass,
                        category}, this.get_questionOperationCompleted, userState);
        }
        
        private void Onget_questionOperationCompleted(object arg) {
            if ((this.get_questionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.get_questionCompleted(this, new get_questionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:askmewsdl#set_question", RequestNamespace="urn:askmewsdl", ResponseNamespace="urn:askmewsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public bool set_question(string user, string pass, int category, int id_word, string responce, bool invert) {
            object[] results = this.Invoke("set_question", new object[] {
                        user,
                        pass,
                        category,
                        id_word,
                        responce,
                        invert});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void set_questionAsync(string user, string pass, int category, int id_word, string responce, bool invert) {
            this.set_questionAsync(user, pass, category, id_word, responce, invert, null);
        }
        
        /// <remarks/>
        public void set_questionAsync(string user, string pass, int category, int id_word, string responce, bool invert, object userState) {
            if ((this.set_questionOperationCompleted == null)) {
                this.set_questionOperationCompleted = new System.Threading.SendOrPostCallback(this.Onset_questionOperationCompleted);
            }
            this.InvokeAsync("set_question", new object[] {
                        user,
                        pass,
                        category,
                        id_word,
                        responce,
                        invert}, this.set_questionOperationCompleted, userState);
        }
        
        private void Onset_questionOperationCompleted(object arg) {
            if ((this.set_questionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.set_questionCompleted(this, new set_questionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:askmewsdl#add_word", RequestNamespace="urn:askmewsdl", ResponseNamespace="urn:askmewsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int add_word(string user, string pass, string from, string to, int category) {
            object[] results = this.Invoke("add_word", new object[] {
                        user,
                        pass,
                        from,
                        to,
                        category});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void add_wordAsync(string user, string pass, string from, string to, int category) {
            this.add_wordAsync(user, pass, from, to, category, null);
        }
        
        /// <remarks/>
        public void add_wordAsync(string user, string pass, string from, string to, int category, object userState) {
            if ((this.add_wordOperationCompleted == null)) {
                this.add_wordOperationCompleted = new System.Threading.SendOrPostCallback(this.Onadd_wordOperationCompleted);
            }
            this.InvokeAsync("add_word", new object[] {
                        user,
                        pass,
                        from,
                        to,
                        category}, this.add_wordOperationCompleted, userState);
        }
        
        private void Onadd_wordOperationCompleted(object arg) {
            if ((this.add_wordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.add_wordCompleted(this, new add_wordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:askmewsdl#try_login", RequestNamespace="urn:askmewsdl", ResponseNamespace="urn:askmewsdl")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public bool try_login(string user, string pass) {
            object[] results = this.Invoke("try_login", new object[] {
                        user,
                        pass});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void try_loginAsync(string user, string pass) {
            this.try_loginAsync(user, pass, null);
        }
        
        /// <remarks/>
        public void try_loginAsync(string user, string pass, object userState) {
            if ((this.try_loginOperationCompleted == null)) {
                this.try_loginOperationCompleted = new System.Threading.SendOrPostCallback(this.Ontry_loginOperationCompleted);
            }
            this.InvokeAsync("try_login", new object[] {
                        user,
                        pass}, this.try_loginOperationCompleted, userState);
        }
        
        private void Ontry_loginOperationCompleted(object arg) {
            if ((this.try_loginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.try_loginCompleted(this, new try_loginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void get_missing_countCompletedEventHandler(object sender, get_missing_countCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class get_missing_countCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal get_missing_countCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void get_update_availableCompletedEventHandler(object sender, get_update_availableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class get_update_availableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal get_update_availableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void get_software_versionCompletedEventHandler(object sender, get_software_versionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class get_software_versionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal get_software_versionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void set_settingCompletedEventHandler(object sender, set_settingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class set_settingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal set_settingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void get_settingsCompletedEventHandler(object sender, get_settingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class get_settingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal get_settingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void get_categoriesCompletedEventHandler(object sender, get_categoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class get_categoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal get_categoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void get_questionCompletedEventHandler(object sender, get_questionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class get_questionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal get_questionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void set_questionCompletedEventHandler(object sender, set_questionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class set_questionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal set_questionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void add_wordCompletedEventHandler(object sender, add_wordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class add_wordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal add_wordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void try_loginCompletedEventHandler(object sender, try_loginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class try_loginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal try_loginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591